openapi: 3.0.0
info:
  title: Event ticketing system
  version: v1
  contact: {
    "name": "API Support",
    "email": "kkraken2005@gmail.com"
  }

servers:
  - url: http://localhost:8090/api/v1
    description: Server url
paths:
  /ticket:
    post:
      tags:
        - ticket-controller
      operationId: boughtTicket
      summary: buy ticket operation
      parameters:
        - name: userId
          in: query
          required: true
          schema:
            type: integer
            format: int64
        - name: eventId
          in: query
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /ticket/{id}:
    get:
      tags:
        - ticket-controller
      operationId: find
      summary: find ticket by id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: object

    delete:
      tags:
        - ticket-controller
      operationId: delete
      summary: delete ticket by id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /user/{id}:
    get:
      tags:
        - user-controller
      operationId: find user
      summary: find user by id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: object
    delete:
      tags:
        - user-controller
      operationId: delete user account
      summary: delete user
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: NO CONTENT
    put:
      tags:
        - user-controller
      operationId: update
      summary: full update user
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: object
    patch:
      tags:
        - user-controller
      operationId: partial update
      summary: partial update user
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /user/:
    post:
      tags:
        - user-controller
      operationId: save
      summary: register user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: object

  /event:
    put:
      tags:
        - event-controller
      operationId: search
      summary: search
      parameters:
        - name: from
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: to
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 10
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventSearchRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: object
    post:
      tags:
        - event-controller
      operationId: save event
      summary: add event available for admin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /event/{id}:
    get:
      tags:
        - event-controller
      operationId: get
      summary: find event by id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: object
    delete:
      tags:
        - event-controller
      operationId: delete event
      summary: add event available for admin
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: No Content
components:
  schemas:
    EventSearchRequest:
      type: object
      properties:
        text:
          type: string
        time:
          type: string
          format: date
        type:
          type: string
          enum: ["SPORT", "CONCERT", "FESTIVAL", "CINEMA", "THEATER", "MUSEUM", "CIRCUS"]
        country:
          type: string
        city:
          type: string
    AddressDTO:
      type: object
      properties:
        country:
          type: string
        city:
          type: string
        street:
          type: string
        buildingName:
          type: string
        mark:
          type: string
    EventDTO:
      type: object
      properties:
        time:
          type: string
          format: date
        address:
          $ref: '#/components/schemas/AddressDTO'
        type:
          type: string
          enum: ["SPORT", "CONCERT", "FESTIVAL", "CINEMA", "THEATER", "MUSEUM", "CIRCUS"]
        title:
          type: string
        description:
          type: string
    UserDTO:
      required:
        - firstName
        - lastName
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          maxLength: 2147483647
          minLength: 8
          type: string
